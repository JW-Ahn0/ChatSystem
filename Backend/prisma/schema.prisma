// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Chat {
  chat_id    String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId 사용
  room_id    String
  sender     String
  is_read    Boolean  @default(false)
  msg        String   @default("")
  created_at DateTime @default(now())

  @@index([room_id], name: "idx_room_id") // 채팅방 기준으로 인덱스 설정
  @@index([sender], name: "idx_sender")   // 보낸 사람 기준 인덱스
}

model ChatRoom {
  room_id    String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId 사용
  user_list String[] // 배열로 참여 유저 ID 저장
}

model ChatUnread {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB 고유 식별자
  user_id        String
  room_id        String
  unread_msg_cnt Int?      @default(0)

  @@unique([user_id, room_id], name: "unique_user_room") // 복합 고유 인덱스 설정
  @@index([room_id], name: "idx_room_id_unread")         // 채팅방별 인덱스
}

model UserNickName {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB 고유 식별자
  user_id        String 
  user_nickname  String

  @@index([user_id], name: "idx_user_id")         // 채팅방별 인덱스

}